# Production Docker Compose Configuration
version: '3.8'

services:
  # Frontend Service
  frontend:
    build:
      context: ./ide-frontend
      dockerfile: Dockerfile
      target: production
    container_name: ide-frontend-prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    environment:
      - NODE_ENV=production
    volumes:
      - ./ssl:/etc/nginx/ssl:ro  # Mount SSL certificates
    depends_on:
      - backend
    networks:
      - ide-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend Service
  backend:
    build:
      context: ./ide-backend
      dockerfile: Dockerfile
      target: production
    container_name: ide-backend-prod
    restart: unless-stopped
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=production
    env_file:
      - ./ide-backend/.env.production
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock  # For container management
      - backend-logs:/app/logs
      - backend-workspaces:/app/workspaces
    depends_on:
      - mongodb
      - redis
    networks:
      - ide-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MongoDB Database
  mongodb:
    image: mongo:6-alpine
    container_name: ide-mongodb-prod
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: your-strong-password
      MONGO_INITDB_DATABASE: ide-backend-prod
    volumes:
      - mongodb-data:/data/db
      - ./mongo-init:/docker-entrypoint-initdb.d:ro
    networks:
      - ide-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: ide-redis-prod
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass your-redis-password
    volumes:
      - redis-data:/data
    networks:
      - ide-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Load Balancer (Optional - for multiple backend instances)
  nginx-lb:
    image: nginx:alpine
    container_name: ide-nginx-lb
    restart: unless-stopped
    ports:
      - "8080:80"
    volumes:
      - ./nginx-lb.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    networks:
      - ide-network

  # Monitoring - Prometheus (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: ide-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - ide-network
    profiles:
      - monitoring

  # Monitoring - Grafana (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: ide-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: your-grafana-password
    volumes:
      - grafana-data:/var/lib/grafana
    networks:
      - ide-network
    profiles:
      - monitoring

networks:
  ide-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  mongodb-data:
    driver: local
  redis-data:
    driver: local
  backend-logs:
    driver: local
  backend-workspaces:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local